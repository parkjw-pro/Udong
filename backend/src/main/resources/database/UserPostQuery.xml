<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ssafy.udong.dao.UserPostDao">

	<!-- 글쓰기 -->
	<insert id="createUserPost"
		parameterType="com.ssafy.udong.dto.UserPostDto">
		INSERT INTO user_post ( user_id, post_content, post_views, is_open, post_like_count, post_tag, is_updated, post_comment_count )
		VALUES ( #{userId}, #{postContent}, 0, #{isOpen}, 0, #{postTag}, 0, 0)
	</insert>

	<!--유저post 이미지삽입 -->
	<insert id="createUserPostFile"
		parameterType="com.ssafy.udong.dto.ImageDto" useGeneratedKeys="true"
		keyProperty="fileId">
		INSERT INTO image (file_name, file_size, file_contentType, file_url)
		VALUES (#{fileName}, #{fileSize}, #{fileContentType}, #{fileUrl});
	</insert>

	<!--게시글과 파일 연결 -->
	<insert id="connectionFile"
		parameterType="com.ssafy.udong.dto.UserPostDto"
		useGeneratedKeys="true">
		INSERT INTO user_post_file(post_id, user_id, file_id)
		VALUES ((select max(post_id) from user_post), #{userId}, (select max(file_id) from image));
	</insert>


	<!-- 글 가져오기 -->
	<select id="selectAllUserPost" parameterType="com.ssafy.udong.dto.UserPostParamDto"
		resultType="com.ssafy.udong.dto.UserPostDto">
		SELECT p.post_id, p.user_id, u.nickname, p.post_content, p.created_at, p.post_views,
		p.is_open, p.post_like_count, p.post_tag, p.is_updated, p.updated_at, p.post_comment_count
		FROM user_post p, user u
		WHERE p.user_id = u.user_id
		ORDER BY p.post_id DESC
		LIMIT #{limit} OFFSET #{offset}
	</select>

	<!-- 유저 한 명이 작성한 글 가져오기 -->
	<select id="selectUserPostByUserId" parameterType="com.ssafy.udong.dto.UserPostParamDto"
		resultType="com.ssafy.udong.dto.UserPostDto">
		SELECT p.post_id, p.user_id, u.nickname, p.post_content, p.created_at, p.post_views,
		p.is_open, p.post_like_count, p.post_tag, p.is_updated, p.updated_at, p.post_comment_count
		FROM user_post p, user u
		WHERE p.user_id = u.user_id and u.user_id = #{userId}
		ORDER BY p.post_id DESC
		LIMIT #{limit} OFFSET #{offset}
	</select>
	
	<!-- 검색어로 글 가져오기 -->
	<select id="selectUserPostBySearchWord" parameterType="map"
		resultType="com.ssafy.udong.dto.UserPostDto">
		SELECT p.post_id, p.user_id, u.nickname, p.post_content, p.created_at, p.post_views,
		p.is_open, p.post_like_count, p.post_tag, p.is_updated, p.updated_at, p.post_comment_count
		FROM user_post p, user u
		WHERE p.user_id = u.user_id AND p.post_content LIKE CONCAT('%', #{searchWord} ,'%')
		ORDER BY p.post_id DESC
		LIMIT #{limit} OFFSET #{offset}
	</select>
	
	<!-- 유저 한 명이 작성한 글 중 검색어로 가져오기 -->
	<select id="selectUserPostByUserIdAndWord" parameterType="com.ssafy.udong.dto.UserPostParamDto"
		resultType="com.ssafy.udong.dto.UserPostDto">
		SELECT p.post_id, p.user_id, u.nickname, p.post_content, p.created_at, p.post_views,
		p.is_open, p.post_like_count, p.post_tag, p.is_updated, p.updated_at, p.post_comment_count
		FROM user_post p, user u
		WHERE p.user_id = u.user_id AND u.user_id = #{userId} AND p.post_content LIKE CONCAT('%', #{searchWord} ,'%')
		ORDER BY p.post_id DESC
		LIMIT #{limit} OFFSET #{offset}
	</select>
	
	<!-- 글 총개수 -->
	<select id="userPostTotalCount" resultType="int">
		SELECT COUNT(*) FROM
		user_post
	</select>

	<!-- 글 총개수(검색어) -->
	<select id="userPostBySearchWordTotalCount"
		parameterType="string" resultType="int">
		SELECT COUNT(*)
		FROM user_post
		WHERE post_content LIKE CONCAT('%', #{searchWord} ,'%')
	</select>
	
	<!-- 글 총개수(user 별) -->
	<select id="userPostByUserIdTotalCount"
		parameterType="string" resultType="int">
		SELECT COUNT(*)
		FROM user_post
		WHERE user_id = #{userId}
	</select>
	
	<!-- 글 총개수(user 별. 검색어) -->
	<select id="userPostByUserIdAndWordTotalCount"
		parameterType="string" resultType="int">
		SELECT COUNT(*)
		FROM user_post
		WHERE user_id = #{userId} AND post_content LIKE CONCAT('%', #{searchWord} ,'%')
	</select>
		
	<!-- 글 상세 가져오기 -->
	<select id="selectUserPost"
		parameterType="com.ssafy.udong.dto.UserPostDto"
		resultType="com.ssafy.udong.dto.UserPostDto">
		SELECT p.post_id, p.user_id, u.nickname, p.post_content, p.created_at, p.post_views,
		p.is_open, p.post_like_count, p.post_tag, p.is_updated, p.updated_at, p.post_comment_count
		FROM user_post p, user u
		WHERE p.user_id = u.user_id AND p.post_id =	#{postId}
	</select>

	<!--해당게시글의 파일 url찾기 -->
	<select id="selectFileId" parameterType="String"
		resultType="String">
		select file_id from user_post_file
		where post_id = #{postId};
	</select>


	<!-- 글 수정 -->
	<update id="updateUserPost"
		parameterType="com.ssafy.udong.dto.UserPostDto">
		UPDATE user_post
		SET post_content = #{postContent}, is_open = #{isOpen}, post_tag = #{postTag}, is_updated = is_updated + 1, updated_at = now()
		WHERE post_id = #{postId}
	</update>

	<!-- 글 삭제 -->
	<delete id="deleteUserPost" parameterType="String">
		DELETE FROM user_post
		WHERE post_id = #{postId}
	</delete>


	<!-- 조회수 불러오기 -->
	<select id="selectUserPostViews" parameterType="String"
		resultType="int">
		SELECT post_views FROM user_post 
		WHERE post_id = #{postId}
	</select>

	<!-- 조회수 1증가 시키기 -->
	<update id="updateUserPostViews" parameterType="String">
		UPDATE user_post
		set	post_views = post_views + 1
		WHERE post_id = #{postId}
	</update>


	<!-- UserPostLike 포스트 좋아요 -->
	<insert id="createUserPostLike"
		parameterType="com.ssafy.udong.dto.LikeDto">
		INSERT INTO user_post_like(user_id, post_id)
		VALUES (#{userId}, #{postId});
		
		update user_post
		set post_like_count = post_like_count + 1
		where user_id = #{userId} and post_id = #{postId};
	</insert>

	<select id="selectUserPostLike"
		parameterType="com.ssafy.udong.dto.LikeDto" resultType="String">
		select user_id as userId
		from user_post_like
		where post_id = #{postId} and user_id = #{userId}
	</select>

	<delete id="deleteUserPostLike"
		parameterType="com.ssafy.udong.dto.LikeDto">
		DELETE FROM user_post_like
		WHERE post_id = #{postId} and user_id = #{userId};
		
		update user_post
		set post_like_count = post_like_count - 1
		where user_id = #{userId} and post_id = #{postId};
	</delete>
	
	
	<!-- 댓글 입력 -->
	<insert id="createUserPostComment"
		parameterType="com.ssafy.udong.dto.CommentDto">
		INSERT INTO user_post_comment (post_id, user_id, comm_content, comm_like_count)
		VALUES(#{postId}, #{userId}, #{commContent} ,0);
	</insert>

	<!-- 댓글 가져오기 -->
	<select id="selectUserPostComment" parameterType="map"
		resultType="com.ssafy.udong.dto.CommentDto">
		SELECT c.comment_id, c.post_id, c.user_id, u.nickname, c.comm_content, c.created_at, c.comm_like_count
		FROM user_post_comment c, user u
		WHERE c.user_id = u.user_id	and c.post_id = #{postId}
		ORDER BY c.comment_id DESC
		LIMIT #{limit} OFFSET #{offset}
	</select>

	<!-- 댓글 총개수 -->
	<select id="userPostCommentTotalCount" parameterType="map" resultType="int">
		SELECT COUNT(*) FROM
		user_post_comment
		where post_id = #{postId}
	</select>


	<!-- UserPostCommentLike 유저 포스트 댓글의 좋아요 -->
	<insert id="createUserPostCommentLike"
		parameterType="com.ssafy.udong.dto.LikeDto">
		INSERT INTO user_post_comment_like(user_id, post_id, comment_id)
		VALUES (#{userId}, #{postId}, #{commentId});
		
		update user_post_comment
		set comm_like_count = comm_like_count + 1
		where comment_id = #{commentId};
	</insert>
	
	<select id="selectUserPostCommentLike"
		parameterType="com.ssafy.udong.dto.LikeDto" resultType="String">
		select user_id
		from user_post_comment_like
		where comment_id = #{commentId}	and user_id = #{userId};
	</select>

	<delete id="deleteUserPostCommentLike" parameterType="com.ssafy.udong.dto.LikeDto">
		DELETE FROM user_post_comment_like
		WHERE comment_id = #{commentId} and user_id = #{userId};
		
		update user_post_comment
		set comm_like_count = comm_like_count - 1
		where comment_id = #{commentId};
	</delete>


	<!-- UserPost, UserPostComment 신고 -->
	<insert id="createUserPostReport" parameterType="com.ssafy.udong.dto.ReportDto">
		INSERT INTO user_post_report(user_id, post_id, content, category)
		VALUES (#{userId}, #{postId}, #{content}, #{category});
	</insert>
	
	<insert id="createUserPostCommentReport" parameterType="com.ssafy.udong.dto.ReportDto">
		INSERT INTO user_comment_report(user_id, post_id, comment_id, content, category)
		VALUES (#{userId}, #{postId}, #{commentId}, #{content}, #{category});
	</insert>

</mapper>