<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ssafy.udong.dao.UserBoardDao">

	<!-- 글쓰기 -->
	<insert id="insertBoard"
		parameterType="com.ssafy.udong.dto.UserBoardDto">
		INSERT INTO user_post ( user_id, post_content , post_views ,
		is_open, post_like_count, post_tag , is_updated, post_comment_count )
		VALUES ( #{userId}, #{postContent}, "0", #{isOpen},
		"0", #{postTag}, #{isUpdated}, "0" )
	</insert>
	
	<!--유저post 이미지삽입 -->
	<insert id="createUserBoardFile"
		parameterType="com.ssafy.udong.dto.ImageDto" useGeneratedKeys="true"
		keyProperty="fileId">
		INSERT INTO image (file_name, file_size, file_contentType,
		file_url)
		VALUES (#{fileName}, #{fileSize}, #{fileContentType},
		#{fileUrl});
	</insert>
	
	<!--게시글과 파일 연결 -->
	<insert id="connectionFile"
		parameterType="com.ssafy.udong.dto.UserBoardDto" useGeneratedKeys="true">
		INSERT
		INTO `user_post_file` (`post_id`, `user_id`, `file_id`
		)
		VALUES ((select max(post_id) from user_post), #{userId},
		(select max(file_id) from image));
	</insert>


	<!-- 글 가져오기 -->
	<select id="listBoard" parameterType="map"
		resultType="com.ssafy.udong.dto.UserBoardDto">
		SELECT p.post_id as postId, p.user_id as userId, u.nickname
		,
		p.post_content as postContent, p.created_at as createdAt,
		p.post_views as postViews,
		p.is_open as isOpen, p.post_like_count as
		postListCount , p.post_tag
		as postTag, p.is_updated as isUpdated,
		p.updated_at as updatedAt, p.post_comment_count as postCommentCount
		FROM user_post p, USER u
		WHERE p.user_id = u.user_id
		ORDER BY p.post_id
		DESC
		LIMIT #{limit} OFFSET #{offset}

	</select>
	<!-- 글 가져오기 -->
	<select id="searchWordListBoard" parameterType="map"
		resultType="com.ssafy.udong.dto.UserBoardDto">
		SELECT p.post_id as postId, p.user_id as userId, u.nickname
		,
		p.post_content as postContent, p.created_at as createdAt,
		p.post_views as postViews,
		p.is_open as isOpen, p.post_like_count as
		postListCount , p.post_tag
		as postTag, p.is_updated as isUpdated,
		p.updated_at as updatedAt, p.post_comment_count as postCommentCount
		FROM user_post p, user u
		WHERE p.user_id = u.user_id
		AND p.post_content
		LIKE CONCAT('%', #{searchWord} ,'%')
		ORDER BY p.post_id DESC
		LIMIT
		#{limit} OFFSET #{offset}
	</select>
	<!-- 글 상세 가져오기 -->
	<select id="detailBoard"
		parameterType="com.ssafy.udong.dto.UserBoardDto"
		resultType="com.ssafy.udong.dto.UserBoardDto">
		SELECT p.post_id as postId, p.user_id as userId, u.nickname
		, p.post_content as postContent, p.created_at as createdAt, p.post_views as postViews,
		p.is_open as isOpen, p.post_like_count as postListCount , p.post_tag as postTag
		, p.is_updated as isUpdated, p.updated_at as updatedAt, p.post_comment_count as postCommentCount
		FROM user_post p, user u
		WHERE p.user_id = u.user_id
		AND p.post_id = #{postId}
	</select>
	
	<!--해당게시글의 파일 url찾기 -->
	<select id="SelectFileUrl" parameterType="String"
		resultType="String">

		select file_url from image
		where file_id = ANY(select file_id from user_post_file
		where post_id = #{postId});
	</select>
	
	

	<!-- 글 총개수 -->
	<select id="totalCountBoardList" resultType="int">
		SELECT COUNT(*) FROM
		user_post
	</select>

	<!-- 글 총개수(검색어) -->
	<select id="searchWordTotalCountBoardList"
		parameterType="string" resultType="int">
		SELECT COUNT()
		FROM user_post
		WHERE post_content
		LIKE CONCAT('%', #{searchWord} ,'%')
	</select>

	<!-- 글수정 -->
	<update id="updateBoard"
		parameterType="com.ssafy.udong.dto.UserBoardDto">
		UPDATE user_post
		SET post_content = #{postContent},
		is_open = #{isOpent},
		post_tag = #{postTag},
		is_updated = #{isUpdated},
		updated_at = now()
		WHERE post_id = #{postId}
	</update>

	<!-- 글 삭제 -->
	<delete id="deleteBoard" parameterType="String">
		DELETE FROM user_post
		WHERE
		post_id = #{postId}
	</delete>

	<!-- 댓글 입력 -->
	<insert id="insertBoardDat"
		parameterType="com.ssafy.udong.dto.UserBoardDto">
		INSERT INTO user_post_comment ( comment_id,
		comm_content)
		VALUES
		(#{postId}, #{postContent} )
	</insert>

	<!-- 댓글 조회 -->
	<select id="selectBoardDat"
		parameterType="com.ssafy.udong.dto.UserBoardDto" resultType="com.ssafy.udong.dto.UserBoardDto">
		SELECT u.nickname , c.comm_content, c.comm_like_count
		FROM user_post_comment c , user u
		WHERE c.user_id = u.user_id
	</select>
	<!-- 조회수 불러오기 -->
	<select id="boardUserReadCount" parameterType="String"
		resultType="int">
		SELECT post_views FROM user_post WHERE post_id =
		#{postId}
	</select>

	<!-- 조회수 1증가 시키기 -->
	<update id="boardReadCountUpdate" parameterType="String">
		UPDATE user_post
		set
		post_views = post_views + 1
		WHERE post_id = #{postId}
	</update>




</mapper>





